generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model assessment {
  id                         Int                         @id() @default(autoincrement())
  project_id                 String                      
  name                       String?                     
  type_id                    Int?
  type                       String?                     
  location                   String?                     
  date                       BigInt?
  manager                    String?                     
  facilitator                Int?
  description                String?                     
  hide_description           Boolean?
  status                     String                      
  has_maturity               Boolean?
  has_environment            Boolean?
  enviroment_score           Int?
  maturity_score             Int?
  current_progress           String                      
  percent_completed          Float?
  maturity_progress          String                      
  env_progress               String                      
  is_env_anonymous           Boolean?
  lock_env                   Boolean?
  internal_assessment_status String?                     
  expiry_date                BigInt?
  factor_facilitator_answers Boolean?
  environment_score          Int?
  user                       user?                       @relation(fields: [facilitator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_types              project_types?              @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assessment_attributes_map  assessment_attributes_map[]
  assessment_facilitators    assessment_facilitators[]
  assessment_level_notes     assessment_level_notes[]
  assessment_user_responses  assessment_user_responses[]
  assessment_users           assessment_users[]

}

model assessment_attributes_map {
  id            Int         @id() @default(autoincrement())
  attribute_id  String?     
  assessment_id Int?
  active        Boolean
  assessment    assessment? @relation(fields: [assessment_id], references: [id], onUpdate: NoAction)
  attributes    attributes? @relation(fields: [attribute_id], references: [id], onUpdate: NoAction)

}

model assessment_defaults {
  id                         Int       @id() @default(autoincrement())
  hide_description           Boolean?
  is_env_anonymous           Boolean?
  factor_facilitator_answers Boolean?
  last_updated               DateTime?
  updated_by                 Int?
}

model assessment_facilitators {
  user_id       Int
  assessment_id Int
  assessment    assessment @relation(fields: [assessment_id], references: [id], onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@id([user_id, assessment_id])
}

model assessment_level_notes {
  id               Int         @id() @default(autoincrement())
  assigned_user_id Int?
  assessment_id    Int?
  notes            String      
  due_date         BigInt?
  status           String      
  assessment       assessment? @relation(fields: [assessment_id], references: [id], onUpdate: NoAction)
  user             user?       @relation(fields: [assigned_user_id], references: [id], onUpdate: NoAction)

}

model assessment_meta {
  id       Int        @id() @default(autoincrement())
  type     String     
  name     String?    
  active   Boolean
  sections sections[]
}

model assessment_user_env_sections_map {
  id                 Int               @id() @default(autoincrement())
  assessment_user_id Int?
  sections_id        String?          
  active             Boolean
  assessment_users   assessment_users? @relation(fields: [assessment_user_id], references: [id], onUpdate: NoAction)
  sections           sections?         @relation(fields: [sections_id], references: [id], onUpdate: NoAction)
}

model assessment_user_responses {
  id                      Int         @id() @default(autoincrement())
  user_id                 Int?
  assessment_id           Int?
  attribute_id            String?     
  level_id                Int?
  notes                   String?     
  section_id              String?     
  is_facilitator_response Boolean     @default(false)
  assessment              assessment? @relation(fields: [assessment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  attributes              attributes? @relation(fields: [attribute_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  levels                  levels?     @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sections                sections?   @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                    user?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model assessment_users {
  id                               Int                                @id() @default(autoincrement())
  user_id                          Int?
  assessment_id                    Int?
  user_project_role                Int?
  user_govt_role                   Int?
  current_progress                 String?                            
  attended_workshop                Boolean?
  expiry                           BigInt?
  active                           Boolean
  assessment_user_env_sections_map assessment_user_env_sections_map[]
  assessment                       assessment?                        @relation(fields: [assessment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  govt_roles                       govt_roles?                        @relation(fields: [user_govt_role], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                             user?                              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_roles                    project_roles?                     @relation(fields: [user_project_role], references: [id], onDelete: NoAction)

}

model attributes {
  id                        String                      @id()
  name                      String?                     
  description               String?                     
  section_id                String?                   
  active                    Boolean
  assessment_attributes_map assessment_attributes_map[]
  assessment_user_responses assessment_user_responses[]
  sections                  sections?                   @relation(fields: [section_id], references: [id], onUpdate: NoAction)
  levels                    levels[]

}

model govt_roles {
  id               Int                @id() @default(autoincrement())
  name             String             @unique() 
  assessment_users assessment_users[]
  project_roles    project_roles[]
  user_settings    user_settings[]
}

model levels {
  id                        Int                         @id() @default(autoincrement())
  short_description         String?                     
  long_description          String?                     
  level_number              Int
  weight                    Int
  attribute_id              String?                     
  active                    Boolean
  assessment_user_responses assessment_user_responses[]
  attributes                attributes?                 @relation(fields: [attribute_id], references: [id], onUpdate: NoAction)

}

model organization {
  id                 Int     @id() @default(autoincrement())
  name               String? 
  logo               String? 
  sign_options       String
  session_expiration String

}

model project_roles {
  id               Int                @id() @default(autoincrement())
  name             String             
  govt_role_id     Int?
  assessment_users assessment_users[]
  govt_roles       govt_roles?        @relation(fields: [govt_role_id], references: [id], onUpdate: NoAction)
  user_settings    user_settings[]

}

model project_types {
  id         Int          @id() @default(autoincrement())
  name       String       @unique() 
  assessment assessment[]
}

model sections {
  id                               String                             @id()
  name                             String?                            
  active                           Boolean
  assessment_meta_id               Int?
  description                      String?                            
  assessment_user_env_sections_map assessment_user_env_sections_map[]
  assessment_user_responses        assessment_user_responses[]
  attributes                       attributes[]
  assessment_meta                  assessment_meta?                   @relation(fields: [assessment_meta_id], references: [id], onUpdate: NoAction)

}

model settings {
  id                 Int     @id() @default(autoincrement())
  value              String? 
  last_updated_time  BigInt?
  last_updated_by_id Int?
  user               user?   @relation(fields: [last_updated_by_id], references: [id], onUpdate: NoAction)
}


model user {
  id                        Int                         @id() @default(autoincrement())
  firstname                 String                      
  lastname                  String                      
  email                     String                      @unique() 
  phone_number              String?                     
  password                  String?                     
  role_id                   Int?
  is_google_user            Boolean
  is_okta_user              Boolean
  is_active                 Boolean
  last_seen                 BigInt?
  status                    String                     
  expiry_date               BigInt?
  country                   String?                     
  about                     String?                     
  assessment                assessment[]
  assessment_facilitators   assessment_facilitators[]
  assessment_level_notes    assessment_level_notes[]
  assessment_user_responses assessment_user_responses[]
  assessment_users          assessment_users[]
  settings                  settings[]
  user_roles                user_roles?                 @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  user_action_log           user_action_log[]
  user_settings             user_settings[]

}

model user_action_log {
  id        Int      @id() @default(autoincrement())
  id_user   Int?
  action    String   
  content   String?  
  action_dt DateTime
  user      user?    @relation(fields: [id_user], references: [id], onUpdate: NoAction)


}

model user_roles {
  id   Int    @id() @default(autoincrement())
  role String @unique()
  name String 
  type String 
  user user[]

}

model user_settings {
  id            Int            @id() @default(autoincrement())
  user_id       Int?
  govt_role     Int?
  project_role  Int?
  govt_roles    govt_roles?    @relation(fields: [govt_role], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_roles project_roles? @relation(fields: [project_role], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?          @relation(fields: [user_id], references: [id], onUpdate: NoAction)

}
